type Me {
    id: Int!
    username: String!
    email: String!
    name: String!
    color: String
    universityId: Int
    confirmedUniversityIds: [Int!]
    birthDate: Date
    matchingEnabled: Boolean!
    matchQuality: Int!
    visEmail: Int!
    visInterests: Int!
    # relations: [UserRelation]
    # posts(limit: Int): [Post]
    # comments(limit: Int): [Int]!
    # reactions(limit: Int): [Int]!
    # savedPosts(limit: Int): [Post]
    updatedInterests: Date
    updatedAt: Date
    createdAt: Date
    uniConfirmed: Boolean
    uni: String
    # Match Settings
    manualEnabled: Boolean
    lastAutoMatched: Date
    autoFreq: Int
    nextManualMatchId: Int
    studentsOnly: Boolean
    snoozedUntil: Date
}

type User {
    id: Int!
    username: String!
    name: String!
    color: String
    confirmedUniversityIds: [Int!]
    birthDate: Date
    visEmail: Int!
    visInterests: Int!
    updatedAt: Date
    createdAt: Date
    # Relation Fields
    areFriends: Boolean
    friendDate: Date
    haveMatched: Boolean
    matchDate: Date
    compatibility: Int
    updatedCompatibility: Date
    sentFrTo: Boolean
    receivedFrFrom: Boolean
    unseenChats: Int
}

type UserCore {
    id: Int!
    username: String!
}

type UserRelation {
    user: User!
    # baseUser: User
    areFriends: Boolean!
    compatibility: Int
    haveMatched: Boolean!
}

type UserResponse {
    ok: Boolean!
    errors: [Error!]
    user: User
}

type MeResponse {
    ok: Boolean!
    errors: [Error!]
    user: Me
}

type MeMultiResponse {
    ok: Boolean!
    errors: [Error!]
    user: Me
    user2: User
}

type UserCoreResponse {
    ok: Boolean!
    errors: [Error!]
    user: UserCore
}

type UserInterest {
    id: String!
    userId: Int!
    interestId: Int!
    user: User
    interest: Interest!
    score: Int!
}

input UserInterestInput {
    interestId: Int!
    score: Int!
}

type UserInterestResponse {
    ok: Boolean!
    errors: [Error!]
    userInterest: UserInterest
}

type Match {
    id: Int!
    user: User!
    matchDate: Date
}

type MatchesStore {
    id: Int!
    matches: [Match!]!
    me: Me
}

type ManualMatchResponse {
    success: Boolean!
    matchesStore: MatchesStore
    me: Me
}

type FrStore {
    id: Int!
    users: [User!]!
}

enum FriendRequestType {
    REMOVE
    ACCEPT
    REQUEST
}

type FriendResponse {
    ok: Boolean!
    errors: [Error!]
    user: User
    me: Me
    fr: FrStore
    chats: ChatsStore
    matches: MatchesStore
    type: FriendRequestType
}

type FriendRequestPubsub {
    user: User!
    fr: FrStore!
    chats: ChatsStore!
    matches: MatchesStore!
}

type FriendStatus {
    sender: User
    receiver: User
    initiator: User
    consumer: User
    type: FriendRequestType
}

type ChatsStore {
    id: Int!
    users: [User!]!
}

type ChatsStoreResponse {
    ok: Boolean!
    errors: [Error!]
    chatsStore: ChatsStore
}

type Query {
    getUser(userId: Int!): User
    getUserByHandle(handle: String!): User
    getUsers(limit: Int): [User!]!
    getUserInterests: [UserInterest!]!
    getMatches: MatchesStore!
    getFriendRequests: FrStore!
    getChats: ChatsStore!
    me: Me
}

type Mutation {
    register(username: String!, email: String!, password: String!, name: String!, universityId: Int!): MeMultiResponse!
    login(handle: String!, password: String!): MeMultiResponse!
    logout: MeMultiResponse!
    deleteUser: MeMultiResponse!
    updateMe(
        username: String
        email: String
        oldPassword: String
        password: String
        name: String
        color: String
        birthDate: Date
        universityId: Int
        universityEmail: String
        matchingEnabled: Boolean
        matchQuality: Int
    ): MeMultiResponse!
    updateMatchSettings(
        manualEnabled: Boolean
        autoFreq: Int
        studentsOnly: Boolean
        snoozedUntil: Date
    ): MeMultiResponse!
    addFriend(userId: Int!, remove: Boolean): FriendResponse!
    addUserInterests(userInterests: [UserInterestInput!]!): GenResponse!
    addUserInterest(userInterest: UserInterestInput!, override: Boolean): UserInterestResponse!
    manualMatch: ManualMatchResponse!
}

type Subscription {
    friendRequest: FriendRequestPubsub!
    newAutoMatch: Match!
    newManualMatch: MatchesStore!
    manualMatchAvailable: Int!
}
