type User {
    id: Int!
    username: String!
    email: String!
    name: String!
    color: String
    universityId: Int
    uni: String
    birthDate: Date
    matchPrecision: Int!
    visEmail: Int!
    visInterests: Int!
    relations: [UserRelation]
    posts(limit: Int): [Post]
    # comments(limit: Int): [Int]!
    # reactions(limit: Int): [Int]!
    savedPosts(limit: Int): [Post]
    updatedInterests: Date
    updatedAt: Date
    createdAt: Date
    areFriends: Boolean
    friendDate: Date
    haveMatched: Boolean
    matchDate: Date
    compatibility: Int
    updatedCompatibility: Date
}

type UserCore {
    id: Int!
    username: String!
}

type UserRelation {
    user: User!
    # baseUser: User
    areFriends: Boolean!
    compatibility: Int
    haveMatched: Boolean!
}

type UserResponse {
    ok: Boolean!
    errors: [Error!]
    user: User
}

type UserCoreResponse {
    ok: Boolean!
    errors: [Error!]
    user: UserCore
}

type UserInterest {
    id: String!
    userId: Int!
    interestId: Int!
    user: User
    interest: Interest!
    score: Int!
}

input UserInterestInput {
    interestId: Int!
    score: Int!
}

type UserInterestResponse {
    ok: Boolean!
    errors: [Error!]
    userInterest: UserInterest
}

type Match {
    id: Int!
    user: User!
    matchDate: Date!
}

type Query {
    getUser(userId: Int!): User
    getUserByHandle(handle: String!): User
    getUsers(limit: Int): [User!]!
    getUserInterests: [UserInterest!]!
    getMatches: [Match!]!
    getChats: [User!]!
    me: User
}

type Mutation {
    register(username: String!, email: String!, password: String!, name: String!, universityId: Int!): UserResponse!
    login(handle: String!, password: String!): UserResponse!
    logout: UserResponse!
    deleteUser: UserResponse!
    updateMe(username: String, email: String, oldPassword: String, password: String, name: String, color: String, birthDate: Date, universityId: Int): UserResponse!
    addFriend(userId: Int!, remove: Boolean): UserResponse!
    addUserInterests(userInterests: [UserInterestInput!]!): GenResponse!
    addUserInterest(userInterest: UserInterestInput!, override: Boolean): UserInterestResponse!
}
