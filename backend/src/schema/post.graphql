type Reaction {
    type: String!
    num: Int!
    userIds: [Int!]
}

type Post {
    id: Int!
    universityId: Int!
    studentsOnly: Boolean!
    author: User!
    text: String!
    reactions: [Reaction!]
    numLikes: Int!
    comments: [Comment!]!
    # savedBy(limit: Int): [User!]!
    createdAt: Date!
}

type Comment {
    id: Int!
    text: String!
    author: User!
    reactions: [Reaction!]
    numLikes: Int!
    createdAt: Date!
    children: [Comment!]
    parent: Comment
    post: Post
}

type SendPostResponse {
    ok: Boolean!
    errors: [Error!]
    post: Post
}

type PostsStore {
    id: Int!
    posts: [Post!]!
}

type Query {
    getPost(id: Int!): Post
    getPosts(limit: Int): [Post!]!
    getPostsFromUser(userId: Int!, limit: Int): [Post!]!
    getPostsFromFriends(cursor: Int): [Post!]!
    getPostsWeighted(cursor: Int, view: String!): PostsStore!
}

type Mutation {
    sendPost(text: String!, studentsOnly: Boolean!): SendPostResponse!
}

type Subscription {
    newPosts: [Post!]
    newPost: Post!
}
