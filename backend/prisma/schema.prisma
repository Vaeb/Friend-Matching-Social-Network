// Tables: Users, UserRelation, Interests, UserInterests, Channels, ChannelUsers, Messages, Posts, PostComments, PostReactions, SavedPosts

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                     Int                   @id @default(autoincrement())
    username               String                @unique
    email                  String                @unique
    password               String
    name                   String
    university             University?           @relation("SelectedUni", fields: [universityId], references: [id])
    universityId           Int?
    universities           UniversityStudent[]
    color                  String?
    birthDate              DateTime?
    matchQuality           Int                   @default(0)
    visEmail               Int                   @default(0)
    visInterests           Int                   @default(0)
    relations1             UserRelation[]        @relation("UserRel1")
    relations2             UserRelation[]        @relation("UserRel2")
    sentFriendRequests     FriendRequests[]      @relation("FriendSender")
    receivedFriendRequests FriendRequests[]      @relation("FriendReceiver")
    interests              UserInterest[]
    matchingEnabled        Boolean               @default(true)
    matchSettings          MatchSettings[]       @relation("UserMatchSettings")
    nextUserMatchSettings  MatchSettings[]       @relation("NextManualMatch")
    channels               Channel[]
    sentMessages           Message[]             @relation("MessageFrom")
    receivedMessages       Message[]             @relation("MessageTo")
    createdChannels        Channel[]             @relation("CreatedChannels")
    posts                  Post[]                @relation("CreatedPosts")
    comments               Comment[]             @relation("CreatedComments")
    postReactions          PostReactionUser[]
    commentReactions       CommentReactionUser[]
    savedPosts             Post[]                @relation("SavedPosts")
    updatedInterests       DateTime?
    createdAt              DateTime              @default(now())
    updatedAt              DateTime              @updatedAt

    @@map("users")
}

model UniversityStudent {
    user         User       @relation(fields: [userId], references: [id])
    userId       Int
    university   University @relation(fields: [universityId], references: [id])
    universityId Int
    uniEmail     String
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    @@id([userId, universityId])
    @@map("university_students")
}

model MatchSettings {
    user              User       @relation("UserMatchSettings", fields: [userId], references: [id])
    userId            Int
    university        University @relation(fields: [universityId], references: [id])
    universityId      Int
    manualEnabled     Boolean    @default(true)
    lastAutoMatched   DateTime   @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone"))
    autoFreq          Int        @default(0)
    snoozedUntil      DateTime?
    studentsOnly      Boolean    @default(false)
    nextManualMatch   User?      @relation("NextManualMatch", fields: [nextManualMatchId], references: [id])
    nextManualMatchId Int?
    createdAt         DateTime   @default(now())
    updatedAt         DateTime   @updatedAt

    @@id([userId, universityId])
    @@map("match_settings")
}

model FriendRequests {
    sender     User     @relation("FriendSender", fields: [senderId], references: [id])
    senderId   Int
    receiver   User     @relation("FriendReceiver", fields: [receiverId], references: [id])
    receiverId Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@id([senderId, receiverId])
    @@map("friend_requests")
}

model UserRelation {
    user1                User      @relation("UserRel1", fields: [user1Id], references: [id])
    user1Id              Int
    user2                User      @relation("UserRel2", fields: [user2Id], references: [id])
    user2Id              Int
    areFriends           Boolean   @default(false)
    friendDate           DateTime?
    compatibility        Int       @default(0)
    updatedCompatibility DateTime?
    haveMatched          Boolean   @default(false)
    matchDate            DateTime?
    createdAt            DateTime  @default(now())
    updatedAt            DateTime  @updatedAt

    @@id([user1Id, user2Id])
    @@map("user_relations")
}

model Interest {
    id            Int            @id @default(autoincrement())
    name          String         @unique
    description   String?
    userInterests UserInterest[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    @@map("interests")
}

model UserInterest {
    user       User     @relation(fields: [userId], references: [id])
    userId     Int
    interest   Interest @relation(fields: [interestId], references: [id])
    interestId Int
    score      Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@id([userId, interestId])
    @@map("user_interests")
}

model Channel {
    id          Int      @id @default(autoincrement())
    type        String // DM | Group
    name        String?
    description String?
    users       User[]
    creator     User?    @relation("CreatedChannels", fields: [creatorId], references: [id])
    creatorId   Int?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("channels")
}

model Message {
    id        Int      @id @default(autoincrement())
    from      User     @relation("MessageFrom", fields: [fromId], references: [id])
    fromId    Int
    to        User     @relation("MessageTo", fields: [toId], references: [id])
    toId      Int
    text      String
    seen      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("messages")
}

model Post {
    id            Int                @id @default(autoincrement())
    text          String
    author        User               @relation("CreatedPosts", fields: [authorId], references: [id], map: "posts_creatorId_fkey")
    authorId      Int
    university    University         @relation(fields: [universityId], references: [id])
    universityId  Int
    studentsOnly  Boolean            @default(false)
    comments      Comment[]
    reactions     PostReaction[]
    reactionUsers PostReactionUser[]
    savedBy       User[]             @relation("SavedPosts")
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt

    @@map("posts")
}

model Comment {
    id            Int                   @id @default(autoincrement())
    post          Post                  @relation(fields: [postId], references: [id])
    postId        Int
    parent        Comment?              @relation("SubComments", fields: [parentId], references: [id])
    parentId      Int?
    text          String
    author        User                  @relation("CreatedComments", fields: [authorId], references: [id], map: "comments_creatorId_fkey")
    authorId      Int
    children      Comment[]             @relation("SubComments")
    reactions     CommentReaction[]
    reactionUsers CommentReactionUser[]
    createdAt     DateTime              @default(now())
    updatedAt     DateTime              @updatedAt

    @@map("comments")
}

model PostReaction {
    post      Post               @relation(fields: [postId], references: [id])
    postId    Int
    type      String
    num       Int                @default(0)
    users     PostReactionUser[]
    createdAt DateTime           @default(now())
    updatedAt DateTime           @updatedAt

    @@id([postId, type])
    @@map("post_reactions")
}

model CommentReaction {
    comment   Comment               @relation(fields: [commentId], references: [id])
    commentId Int
    type      String
    num       Int                   @default(0)
    users     CommentReactionUser[]
    createdAt DateTime              @default(now())
    updatedAt DateTime              @updatedAt

    @@id([commentId, type])
    @@map("comment_reactions")
}

model PostReactionUser {
    reaction  PostReaction @relation(fields: [postId, type], references: [postId, type])
    post      Post         @relation(fields: [postId], references: [id])
    postId    Int
    type      String
    user      User         @relation(fields: [userId], references: [id])
    userId    Int
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt

    @@id([postId, type, userId])
    @@map("post_reactions_users")
}

model CommentReactionUser {
    reaction  CommentReaction @relation(fields: [commentId, type], references: [commentId, type])
    comment   Comment         @relation(fields: [commentId], references: [id])
    commentId Int
    type      String
    user      User            @relation(fields: [userId], references: [id])
    userId    Int
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt

    @@id([commentId, type, userId])
    @@map("comment_reactions_users")
}

// model PostReactionSender {
//     id             Int      @id @default(autoincrement())
//     reaction       PostReaction @relation(fields: [reactionPostId, reactionType], references: [postId, type])
//     reactionPostId Int
//     reactionType   String
//     user           User     @relation("CreatedReactions", fields: [userId], references: [id], map: "reactions_creatorId_fkey")
//     userId         Int
//     createdAt      DateTime @default(now())
//     updatedAt      DateTime @updatedAt

//     @@map("reaction_users")
// }

model University {
    id               Int                 @id @default(autoincrement())
    name             String              @unique
    shortName        String?
    emailRegex       String?
    publicRestricted Int                 @default(0) // 0=None, 1=Phone, 2=Student, 3=StudentFriend
    posts            Post[]
    activeUsers      User[]              @relation("SelectedUni")
    students         UniversityStudent[]
    MatchSettings    MatchSettings[]
    createdAt        DateTime            @default(now())
    updatedAt        DateTime            @updatedAt

    @@map("universities")
}
