// Tables: Users, UserRelation, Interests, UserInterests, Channels, ChannelUsers, Messages, Posts, PostComments, PostReactions, SavedPosts

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               Int            @id @default(autoincrement())
    username         String         @unique
    email            String         @unique
    password         String
    name             String
    university       University?    @relation(name: "SelectedUni", fields: [universityId], references: [id])
    universityId     Int?
    universities     University[]   @relation(name: "ConfirmedUnis")
    color            String?
    birthDate        DateTime?
    matchPrecision   Int            @default(0)
    visEmail         Int            @default(0)
    visInterests     Int            @default(0)
    relations1       UserRelation[] @relation(name: "UserRel1")
    relations2       UserRelation[] @relation(name: "UserRel2")
    interests        UserInterest[]
    channels         Channel[]
    sentMessages     Message[]      @relation(name: "MessageFrom")
    receivedMessages Message[]      @relation(name: "MessageTo")
    createdChannels  Channel[]      @relation(name: "CreatedChannels")
    posts            Post[]         @relation(name: "CreatedPosts")
    comments         Comment[]      @relation(name: "CreatedComments")
    reactions        Reaction[]     @relation(name: "CreatedReactions")
    savedPosts       Post[]         @relation(name: "SavedPosts")
    updatedInterests DateTime?
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt

    @@map("users")
}

model UserRelation {
    user1                User      @relation(name: "UserRel1", fields: [user1Id], references: [id])
    user1Id              Int
    user2                User      @relation(name: "UserRel2", fields: [user2Id], references: [id])
    user2Id              Int
    areFriends           Boolean   @default(false)
    friendDate           DateTime?
    compatibility        Float?
    haveMatched          Boolean   @default(false)
    matchDate            DateTime?
    updatedCompatibility DateTime?
    createdAt            DateTime  @default(now())
    updatedAt            DateTime  @updatedAt

    @@id([user1Id, user2Id])
    @@map("user_relations")
}

model Interest {
    id            Int            @id @default(autoincrement())
    name          String         @unique
    description   String?
    userInterests UserInterest[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    @@map("interests")
}

model UserInterest {
    user       User     @relation(fields: [userId], references: [id])
    userId     Int
    interest   Interest @relation(fields: [interestId], references: [id])
    interestId Int
    score      Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@id([userId, interestId])
    @@map("user_interests")
}

model Channel {
    id          Int      @id @default(autoincrement())
    type        String // DM | Group
    name        String?
    description String?
    users       User[]
    creator     User?    @relation(name: "CreatedChannels", fields: [creatorId], references: [id])
    creatorId   Int?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("channels")
}

model Message {
    id        Int      @id @default(autoincrement())
    from      User     @relation(name: "MessageFrom", fields: [fromId], references: [id])
    fromId    Int
    to        User     @relation(name: "MessageTo", fields: [toId], references: [id])
    toId      Int
    text      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("messages")
}

model Post {
    id           Int        @id @default(autoincrement())
    text         String
    creator      User       @relation(name: "CreatedPosts", fields: [creatorId], references: [id])
    creatorId    Int
    university   University @relation(fields: [universityId], references: [id])
    universityId Int
    studentsOnly Boolean    @default(false)
    comments     Comment[]
    reactions    Reaction[]
    savedBy      User[]     @relation(name: "SavedPosts")
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    @@map("posts")
}

model Comment {
    id          Int        @id @default(autoincrement())
    post        Post       @relation(fields: [postId], references: [id])
    postId      Int
    parent      Comment?   @relation(name: "SubComments", fields: [parentId], references: [id])
    parentId    Int?
    text        String
    creator     User       @relation(name: "CreatedComments", fields: [creatorId], references: [id])
    creatorId   Int
    subComments Comment[]  @relation(name: "SubComments")
    reactions   Reaction[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    @@map("comments")
}

model Reaction {
    id        Int      @id @default(autoincrement())
    post      Post     @relation(fields: [postId], references: [id])
    postId    Int
    comment   Comment? @relation(fields: [commentId], references: [id])
    commentId Int?
    reaction  String
    creator   User     @relation(name: "CreatedReactions", fields: [creatorId], references: [id])
    creatorId Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("reactions")
}

model University {
    id               Int      @id @default(autoincrement())
    name             String   @unique
    shortName        String?
    emailRegex       String?
    publicRestricted Int      @default(0) // 0=None, 1=Phone, 2=Confirmed
    posts            Post[]
    activeUsers      User[]   @relation(name: "SelectedUni")
    confirmedUsers   User[]   @relation(name: "ConfirmedUnis")
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    @@map("universities")
}
